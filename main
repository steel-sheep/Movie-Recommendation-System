# movie_recommender.py

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# 1. Load Dataset
# Download from: https://grouplens.org/datasets/movielens/
movies = pd.read_csv("movies.csv")  # columns: movieId, title, genres
ratings = pd.read_csv("ratings.csv")  # columns: userId, movieId, rating, timestamp
# 2. Data Preprocessing
# Merge datasets to get genres with ratings
movie_data = movies.merge(ratings, on="movieId")

# Create a 'tags' column combining genres and title
movies['tags'] = movies['genres'].str.replace('|', ' ') + " " + movies['title']

# ------------------------------
# 3. Feature Extraction
# ------------------------------
# Convert text data into TF-IDF vectors
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(movies['tags'])

# Compute cosine similarity between movies
cosine_sim = cosine_similarity(tfidf_matrix)

# Create a Series to map movie titles to index
indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()

# ------------------------------
# 4. Recommendation Function
# ------------------------------
def recommend_movies(title, num_recommendations=5):
    if title not in indices:
        return f"Movie '{title}' not found in dataset."
    
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:num_recommendations+1]
    movie_indices = [i[0] for i in sim_scores]
    return movies['title'].iloc[movie_indices]

# ------------------------------
# 5. Test the recommender
# ------------------------------
if __name__ == "__main__":
    print("Recommended movies for 'Toy Story (1995)':")
    print(recommend_movies("Toy Story (1995)"))
